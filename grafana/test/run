#!/bin/bash

set -x
#
# The 'run' performs a simple test that verifies the S2I image.
# The main focus here is to exercise the S2I scripts.
#
# For more information see the documentation:
# https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#


# Determining system utility executables (darwin compatibility check)
READLINK_EXEC="readlink"
MKTEMP_EXEC="mktemp"
if [[ "$OSTYPE" =~ 'darwin' ]]; then
  ! type -a "greadlink" &>"/dev/null" || READLINK_EXEC="greadlink"
  ! type -a "gmktemp" &>"/dev/null" || MKTEMP_EXEC="gmktemp"
fi

test_dir="$($READLINK_EXEC -zf $(dirname "${BASH_SOURCE[0]}"))"
image_dir=$($READLINK_EXEC -zf ${test_dir}/..)
cid_file=$($MKTEMP_EXEC -u --suffix=.cid)
DOCKER_IMAGE=false
test_port=3000

s2i_args="--pull-policy=never --loglevel=2"
S2I_IMAGE="${IMAGE_NAME}-testapp"

image_exists() {
  buildah inspect $1 &>/dev/null
}


prepare() {
  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
  # s2i build requires the application is a valid 'Git' repository
  pushd ${test_dir}/test-app >/dev/null
  git init
  git config user.email "build@localhost" && git config user.name "builder"
  git add -A && git commit -m "Sample commit"
  popd >/dev/null

}

run_s2i_build() {
  docker info > /dev/null 2>&1
  if [ $? == 0 ]; then
    docker build -t ${IMAGE_NAME} .
    s2i build --incremental=true ${s2i_args} -E "${test_dir}/test/environment" file://${test_dir}/test-app ${IMAGE_NAME} ${S2I_IMAGE}

    result=$?
    if [ $result != 0 ]; then
        exit $result
    fi

    IMAGE_NAME=${S2I_IMAGE}
    DOCKER_IMAGE=true
    rm -rf ${test_dir}/test-app/.git
    echo "docker is running"
  else
    echo "docker is not running"
  fi  

}

run_test_application() {
  if $DOCKER_IMAGE; then
    podman run --name ${CONTAINER_NAME} -P --cidfile $cid_file docker-daemon:${IMAGE_NAME}:latest
  else 
    podman run --name ${CONTAINER_NAME} -P --cidfile $cid_file ${IMAGE_NAME}:latest
  fi

}

wait_for_cid() {
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    [ -f $cid_file ] && break
    echo "Waiting for container to start..."
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
}

container_ip() {
  podman inspect --format="{{ .NetworkSettings.IPAddress }}" "$(cat "${cid_file}")"
}

container_port() {
  podman port "$(cat "${cid_file}")" |grep $test_port/tcp |awk -F ':' '{print $2}'
}

test_connection() {
  echo "Testing HTTP connection (http://localhost:$(container_port))"
  local max_attempts=60
  local sleep_time=2
  local attempt=1
  local result=1
  response_code=000
  while [ $attempt -le $max_attempts ]; do
    echo "Sending GET request to http://localhost:$(container_port)/"
    response_code=$(curl -s -w %{http_code} -o /dev/null http://localhost:$(container_port)/)
    status=$?
    if [ $response_code -eq 302 ] || [ $response_code -eq 200 ]; then
      result=0
      break
    fi
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  return $result
}


cleanup() {
  if image_exists ${S2I_IMAGE}; then
    podman rm --force ${CONTAINER_NAME}
    buildah rmi --force ${S2I_IMAGE}
  fi
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    echo "S2I image '${IMAGE_NAME}' test FAILED (exit code: ${result})"
    cleanup
    exit $result
  fi
}

trap cleanup EXIT SIGHUP SIGINT SIGTERM

prepare

echo "creating s2i build"
run_s2i_build

echo "running test application"
run_test_application &

echo "wait for cid file"
wait_for_cid

if [ ! -z $test_port ]; then
  echo "testing network connection"
  test_connection
  check_result $?
fi

