#!/bin/bash

set -x
#
# The 'run' performs a simple test that verifies the S2I image.
# The main focus here is to exercise the S2I scripts.
#
# For more information see the documentation:
# https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#


# Determining system utility executables (darwin compatibility check)
READLINK_EXEC="readlink"
MKTEMP_EXEC="mktemp"
if [[ "$OSTYPE" =~ 'darwin' ]]; then
  ! type -a "greadlink" &>"/dev/null" || READLINK_EXEC="greadlink"
  ! type -a "gmktemp" &>"/dev/null" || MKTEMP_EXEC="gmktemp"
fi

test_dir="$($READLINK_EXEC -zf $(dirname "${BASH_SOURCE[0]}"))"
image_dir=$($READLINK_EXEC -zf ${test_dir}/..)
cid_file=$($MKTEMP_EXEC -u --suffix=.cid)
DOCKER_IMAGE=false

s2i_args="--pull-policy=never --loglevel=2"
S2I_IMAGE="${IMAGE_NAME}-testapp"

image_exists() {
  buildah inspect $1 &>/dev/null
}

cleanup() {
  if image_exists ${S2I_IMAGE}; then
    buildah rmi --force ${S2I_IMAGE}
  fi
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    echo "S2I image '${IMAGE_NAME}' test FAILED (exit code: ${result})"
    cleanup
    exit $result
  fi
}

trap cleanup EXIT SIGHUP SIGINT SIGTERM

prepare

image_exists ${IMAGE_NAME}

check_result $?
